{"version":3,"sources":["app/components/Logo.jsx","app/views/sessions/JwtRegister.jsx"],"names":["Component","_ref","maxWidth","LogoImg","styled","_jsx","Link","to","children","src","FlexBox","Box","display","alignItems","JustifyBox","justifyContent","ContentBox","height","padding","background","JWTRegister","minHeight","margin","borderRadius","initialValues","email","password","username","remember","validationSchema","Yup","shape","min","required","JwtRegister","dispatch","useDispatch","theme","useTheme","register","useAuth","_useState","useNavigate","useState","_useState2","_slicedToArray","loading","setLoading","handleFormSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","response","wrap","_context","prev","next","sent","setApplicationMessage","text","message","console","log","t0","stop","_x","apply","arguments","Card","className","_jsxs","Grid","container","item","sm","xs","Logo","p","Formik","onSubmit","_ref2","errors","touched","handleChange","handleBlur","handleSubmit","TextField","fullWidth","size","type","name","label","variant","onBlur","value","onChange","helperText","error","Boolean","sx","mb","gap","Checkbox","checked","Paragraph","fontSize","LoadingButton","color","mt","NavLink","style","palette","primary","main","marginLeft"],"mappings":"iHAAA,4BAmBeA,IAbG,SAAHC,GAAsB,IAAhBC,EAAQD,EAARC,SAEXC,EAAUC,YAAO,MAAPA,EAAc,iBAAO,CACjCF,SAAUA,GAAY,QACzB,IAED,OACIG,cAACC,IAAI,CAACC,GAAG,IAAGC,SACRH,cAACF,EAAO,CAACM,IAAI,0CAGzB,C,uOCHMC,EAAUN,YAAOO,IAAPP,EAAY,iBAAO,CAAEQ,QAAS,OAAQC,WAAY,SAAU,IAEtEC,EAAaV,YAAOM,EAAPN,EAAgB,iBAAO,CAAEW,eAAgB,SAAU,IAEhEC,EAAaZ,YAAOU,EAAPV,EAAmB,iBAAO,CAC3Ca,OAAQ,OACRC,QAAS,OACTC,WAAY,sBACb,IAEKC,EAAchB,YAAOU,EAAPV,EAAmB,iBAAO,CAC5Ce,WAAY,UACZE,UAAW,mBACX,UAAW,CACTnB,SAAU,IACVmB,UAAW,IACXC,OAAQ,OACRV,QAAS,OACTW,aAAc,GACdV,WAAY,UAEf,IAGKW,EAAgB,CACpBC,MAAO,GACPC,SAAU,GACVC,SAAU,GACVC,UAAU,GAINC,EAAmBC,MAAaC,MAAM,CAC1CL,SAAUI,MACPE,IAAI,EAAG,uCACPC,SAAS,yBACZR,MAAOK,MAAaL,MAAM,yBAAyBQ,SAAS,wBAsH/CC,UAnHK,WAClB,IAAMC,EAAWC,cACXC,EAAQC,cACNC,EAAaC,cAAbD,SAERE,GADiBC,cACaC,oBAAS,IAAMC,EAAAC,YAAAJ,EAAA,GAAtCK,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GAEpBI,EAAgB,eAAA/C,EAAAgD,YAAAC,cAAAC,MAAG,SAAAC,EAAOC,GAAM,IAAAC,EAAA,OAAAJ,cAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACnB,OAAjBX,GAAW,GAAMS,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAGQnB,EAASc,EAAO5B,MAAO4B,EAAO1B,SAAU0B,EAAO3B,UAAU,KAAD,EAAzE4B,EAAQE,EAAAG,KACdxB,EAASyB,YAAsB,CAAEC,KAAc,OAARP,QAAQ,IAARA,OAAQ,EAARA,EAAUQ,WACjDC,QAAQC,IAAIV,GAEZP,GAAW,GAAOS,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAS,GAAAT,EAAA,SAElBrB,EAASyB,YAAsB,CAAEC,KAAI,OAAAL,EAAAS,SAAA,IAAAT,EAAAS,QAAA,EAAET,EAAAS,GAAGH,WAC1Cf,GAAW,GAAO,yBAAAS,EAAAU,OAAA,GAAAd,EAAA,mBAErB,gBAbqBe,GAAA,OAAAlE,EAAAmE,MAAA,KAAAC,UAAA,KAetB,OACEhE,cAACe,EAAW,CAAAZ,SACVH,cAACiE,IAAI,CAACC,UAAU,OAAM/D,SACpBgE,eAACC,IAAI,CAACC,WAAS,EAAAlE,SAAA,CACbH,cAACoE,IAAI,CAACE,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAGrE,SACvBH,cAACW,EAAU,CAAAR,SACTH,cAACyE,IAAI,QAITzE,cAACoE,IAAI,CAACE,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAGrE,SACvBH,cAACM,IAAG,CAACoE,EAAG,EAAG9D,OAAO,OAAMT,SACtBH,cAAC2E,IAAM,CACLC,SAAUjC,EACVxB,cAAeA,EACfK,iBAAkBA,EAAiBrB,SAElC,SAAA0E,GAAA,IAAG7B,EAAM6B,EAAN7B,OAAQ8B,EAAMD,EAANC,OAAQC,EAAOF,EAAPE,QAASC,EAAYH,EAAZG,aAAcC,EAAUJ,EAAVI,WAAYC,EAAYL,EAAZK,aAAY,OACjEf,eAAA,QAAMS,SAAUM,EAAa/E,SAAA,CAE3BH,cAACmF,IAAS,CACRC,WAAS,EACTC,KAAK,QACLC,KAAK,QACLC,KAAK,QACLC,MAAM,QACNC,QAAQ,WACRC,OAAQT,EACRU,MAAO3C,EAAO5B,MACdwE,SAAUZ,EACVa,WAAYd,EAAQ3D,OAAS0D,EAAO1D,MACpC0E,MAAOC,QAAQjB,EAAO1D,OAAS2D,EAAQ3D,OACvC4E,GAAI,CAAEC,GAAI,KAEZjG,cAACmF,IAAS,CACRC,WAAS,EACTC,KAAK,QACLE,KAAK,WACLD,KAAK,WACLE,MAAM,WACNC,QAAQ,WACRC,OAAQT,EACRU,MAAO3C,EAAO3B,SACduE,SAAUZ,EACVa,WAAYd,EAAQ1D,UAAYyD,EAAOzD,SACvCyE,MAAOC,QAAQjB,EAAOzD,UAAY0D,EAAQ1D,UAC1C2E,GAAI,CAAEC,GAAI,KAGZ9B,eAAC9D,EAAO,CAAC6F,IAAK,EAAG1F,WAAW,SAAQL,SAAA,CAClCH,cAACmG,IAAQ,CACPd,KAAK,QACLE,KAAK,WACLK,SAAUZ,EACVoB,QAASpD,EAAOzB,SAChByE,GAAI,CAAEnF,QAAS,KAGjBb,cAACqG,IAAS,CAACC,SAAU,GAAGnG,SAAA,sDAK1BH,cAACuG,IAAa,CACZjB,KAAK,SACLkB,MAAM,UACN/D,QAASA,EACTgD,QAAQ,YACRO,GAAI,CAAEC,GAAI,EAAGQ,GAAI,GAAItG,SAAA,YAKvBgE,eAACkC,IAAS,CAAAlG,SAAA,4BAERH,cAAC0G,IAAO,CACNxG,GAAG,kBACHyG,MAAO,CAAEH,MAAOxE,EAAM4E,QAAQC,QAAQC,KAAMC,WAAY,GAAI5G,SAAA,eAK3D,cASzB,C","file":"static/js/29.7022e9ba.chunk.js","sourcesContent":["import { CircularProgress } from '@mui/material';\nimport { Box, styled } from '@mui/system';\nimport { Link } from 'react-router-dom';\n\n\n\nconst Component = ({ maxWidth }) => {\n\n    const LogoImg = styled('img')(() => ({\n        maxWidth: maxWidth || '240px',\n    }));\n\n    return (\n        <Link to=\"/\">\n            <LogoImg src=\"/assets/images/FullLogo_NoBuffer.png\" />\n        </Link>\n    );\n};\n\nexport default Component;","import { useTheme } from '@emotion/react';\nimport { LoadingButton } from '@mui/lab';\nimport { Card, Checkbox, Grid, TextField } from '@mui/material';\nimport { Box, styled } from '@mui/system';\nimport { Paragraph } from 'app/components/Typography';\nimport useAuth from 'app/hooks/useAuth';\nimport { Formik } from 'formik';\nimport { useState } from 'react';\nimport { NavLink, useNavigate } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport Logo from 'app/components/Logo'\nimport { setApplicationMessage } from 'app/redux/actions/ApplicationActions'\nimport { useDispatch } from 'react-redux';\n\nconst FlexBox = styled(Box)(() => ({ display: 'flex', alignItems: 'center' }));\n\nconst JustifyBox = styled(FlexBox)(() => ({ justifyContent: 'center' }));\n\nconst ContentBox = styled(JustifyBox)(() => ({\n  height: '100%',\n  padding: '32px',\n  background: 'rgba(0, 0, 0, 0.01)',\n}));\n\nconst JWTRegister = styled(JustifyBox)(() => ({\n  background: '#1A2038',\n  minHeight: '100vh !important',\n  '& .card': {\n    maxWidth: 800,\n    minHeight: 400,\n    margin: '1rem',\n    display: 'flex',\n    borderRadius: 12,\n    alignItems: 'center',\n  },\n}));\n\n// inital login credentials\nconst initialValues = {\n  email: '',\n  password: '',\n  username: '',\n  remember: true,\n};\n\n// form field validation schema\nconst validationSchema = Yup.object().shape({\n  password: Yup.string()\n    .min(6, 'Password must be 6 character length')\n    .required('Password is required!'),\n  email: Yup.string().email('Invalid Email address').required('Email is required!'),\n});\n\nconst JwtRegister = () => {\n  const dispatch = useDispatch()\n  const theme = useTheme();\n  const { register } = useAuth();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n\n  const handleFormSubmit = async (values) => {\n    setLoading(true);\n\n    try {\n      const response = await register(values.email, values.username, values.password);\n      dispatch(setApplicationMessage({ text: response?.message }))\n      console.log(response)\n      //navigate('/');\n      setLoading(false);\n    } catch (e) {\n      dispatch(setApplicationMessage({ text: e?.message }))\n      setLoading(false);\n    }\n  };\n\n  return (\n    <JWTRegister>\n      <Card className=\"card\">\n        <Grid container>\n          <Grid item sm={6} xs={12}>\n            <ContentBox>\n              <Logo />\n            </ContentBox>\n          </Grid>\n\n          <Grid item sm={6} xs={12}>\n            <Box p={4} height=\"100%\">\n              <Formik\n                onSubmit={handleFormSubmit}\n                initialValues={initialValues}\n                validationSchema={validationSchema}\n              >\n                {({ values, errors, touched, handleChange, handleBlur, handleSubmit }) => (\n                  <form onSubmit={handleSubmit}>\n\n                    <TextField\n                      fullWidth\n                      size=\"small\"\n                      type=\"email\"\n                      name=\"email\"\n                      label=\"Email\"\n                      variant=\"outlined\"\n                      onBlur={handleBlur}\n                      value={values.email}\n                      onChange={handleChange}\n                      helperText={touched.email && errors.email}\n                      error={Boolean(errors.email && touched.email)}\n                      sx={{ mb: 3 }}\n                    />\n                    <TextField\n                      fullWidth\n                      size=\"small\"\n                      name=\"password\"\n                      type=\"password\"\n                      label=\"Password\"\n                      variant=\"outlined\"\n                      onBlur={handleBlur}\n                      value={values.password}\n                      onChange={handleChange}\n                      helperText={touched.password && errors.password}\n                      error={Boolean(errors.password && touched.password)}\n                      sx={{ mb: 2 }}\n                    />\n\n                    <FlexBox gap={1} alignItems=\"center\">\n                      <Checkbox\n                        size=\"small\"\n                        name=\"remember\"\n                        onChange={handleChange}\n                        checked={values.remember}\n                        sx={{ padding: 0 }}\n                      />\n\n                      <Paragraph fontSize={13}>\n                        I have read and agree to the terms of service.\n                      </Paragraph>\n                    </FlexBox>\n\n                    <LoadingButton\n                      type=\"submit\"\n                      color=\"primary\"\n                      loading={loading}\n                      variant=\"contained\"\n                      sx={{ mb: 2, mt: 3 }}\n                    >\n                      Regiser\n                    </LoadingButton>\n\n                    <Paragraph>\n                      Already have an account?\n                      <NavLink\n                        to=\"/session/signin\"\n                        style={{ color: theme.palette.primary.main, marginLeft: 5 }}\n                      >\n                        Login\n                      </NavLink>\n                    </Paragraph>\n                  </form>\n                )}\n              </Formik>\n            </Box>\n          </Grid>\n        </Grid>\n      </Card>\n    </JWTRegister>\n  );\n};\n\nexport default JwtRegister;\n"],"sourceRoot":""}