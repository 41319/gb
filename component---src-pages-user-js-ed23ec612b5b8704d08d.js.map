{"version":3,"file":"component---src-pages-user-js-ed23ec612b5b8704d08d.js","mappings":"8SAWA,MAAM,UAAEA,EAAS,SAAEC,GAAaC,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAmFnBC,EAAOA,IAAMD,EAAAA,cAACE,EAAAA,EAAG,CAACC,MAAM,SAErC,UAnFkBC,KACd,MAAM,QAAEC,IAAYC,EAAAA,EAAAA,MACbC,EAAOC,GAAYT,EAAS,KAC5BU,EAAMC,GAAWX,EAAS,MAM3BY,EAAcA,KAChBD,EAAQ,KAAK,EAEjBZ,GAAU,KAPEc,WACR,MAAMC,QAAYC,EAAAA,EAAMC,MAAMC,IAAI,eAClCR,EAASK,EAAI,EAMbG,EAAK,GACN,IAsCH,OAAOhB,EAAAA,cAACiB,EAAAA,EAAM,CAACC,YAAalB,EAAAA,cAAAA,EAAAA,SAAA,OACxBA,EAAAA,cAACmB,EAAAA,EAAY,KACTnB,EAAAA,cAACoB,EAAAA,EAAS,CACNC,MA1BUC,EA0BSf,EAAM,IAAM,CAAC,EAzBjCgB,OAAOC,KAAKF,GAAKG,KAAIC,IACjB,CACHC,IAAKD,EACLE,MAAOF,EACPG,SAAUC,GAAK9B,EAAAA,cAAAA,EAAAA,SAAA,KAnBP+B,EAACJ,EAAKL,KACtB,MAAMU,EAAMV,EAAIK,GAChB,MAAmB,iBAARK,EACAA,EAEPA,aAAeT,QAAUS,EAAIC,cAAgBV,OACtCvB,EAAAA,cAACkC,EAAAA,EAAM,CAACC,QAASA,IAAMzB,EAAQ,CAClCiB,MACAL,MACAU,IAAKV,EAAIK,MACT,cALR,CAMA,EAUgBI,CAAYL,EAAGI,SAoBvBM,KAAM7B,KAGdP,EAAAA,cAACqC,EAAAA,EAAK,CAACC,YAAY,EAAMC,GAAIF,EAAAA,EAAMG,OAAQC,UAAQ,EAACC,KAAMjC,EAAMkC,OAAQhC,GACpEX,EAAAA,cAACqC,EAAAA,EAAMO,OAAM,KACT5C,EAAAA,cAACqC,EAAAA,EAAMQ,MAAK,CAACC,UAAU,MAAK,eAC5B9C,EAAAA,cAACkC,EAAAA,EAAM,CAACa,QAAQ,QAAQ,aAAW,QAAQZ,QAASxB,KAExDX,EAAAA,cAACqC,EAAAA,EAAMW,KAAI,KACPhD,EAAAA,cAACiD,IAAS,CAACC,IAAKzC,aAAI,EAAJA,EAAMuB,IAAKmB,OAASzB,IAtB7Bd,OAAOH,EAAM2C,KAAc,IAADC,QAEvBvC,EAAAA,EAAMC,MAAMC,IAAI,aAAc,CAC5CsC,SAAU7C,SAAS,QAAL4C,EAAJ5C,EAAMa,WAAG,IAAA+B,OAAL,EAAJA,EAAWC,SACrBC,MAAO,CACH,CAAC9C,EAAKkB,KAAMyB,aAAQ,EAARA,EAAUI,cAE5B,EAekDC,CAAWhD,EAAMiB,EAAE,KAEnE1B,EAAAA,cAACqC,EAAAA,EAAMqB,OAAM,KACT1D,EAAAA,cAACkC,EAAAA,EAAM,CAACa,QAAQ,OAAOD,UAAU,oBAAoBX,QAASxB,GAAa,YAvCjEW,KA4CZ,C","sources":["webpack://gatsby-starter-default/./src/pages/user.js"],"sourcesContent":["import * as React from \"react\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport { Form, Button, InputGroup } from '@themesberg/react-bootstrap';\nimport useAuth from \"../hooks/userAuth\";\nimport Parse from '../vendor/Parse'\nimport Table from '../components/NumberTable'\nimport ReactJson from 'react-json-view'\nimport { Modal } from '@themesberg/react-bootstrap';\nimport ItemTable from '../components/ItemTable'\nimport DraggableDiv from \"../components/DraggableDiv\";\nconst { useEffect, useState } = React;\n\nconst IndexPage = () => {\n    const { isLogin } = useAuth()\n    const [users, setUsers] = useState([])\n    const [info, setInfo] = useState(null)\n\n    const run = async () => {\n        const res = await Parse.Cloud.run('listAllUser')\n        setUsers(res)\n    }\n    const handleClose = () => {\n        setInfo(null)\n    }\n    useEffect(() => {\n        run()\n    }, [])\n    const renderValue = (key, obj) => {\n        const val = obj[key]\n        if (typeof val === 'string') {\n            return val\n        }\n        if (val instanceof Object && val.constructor === Object) {\n            return <Button onClick={() => setInfo({\n                key,\n                obj,\n                val: obj[key]\n            })}> View</Button >\n        }\n    }\n\n    const convertToCol = (obj) => {\n        return Object.keys(obj).map(e => {\n            return {\n                key: e,\n                label: e,\n                onRender: i => <>\n                    {\n                        renderValue(e, i)\n                    }\n                </>\n            }\n        })\n    }\n\n    const handleEdit = async (info, newValue) => {\n\n        const res = await Parse.Cloud.run('updateUser', {\n            objectId: info?.obj?.objectId,\n            model: {\n                [info.key]: newValue?.updated_src\n            }\n        })\n    }\n    return <Layout afterSearch={<></>} >\n        <DraggableDiv>\n            <ItemTable\n                cols={convertToCol(users[0] || {})}\n                data={users}\n            />\n        </DraggableDiv>\n        <Modal fullscreen={true} as={Modal.Dialog} centered show={info} onHide={handleClose}>\n            <Modal.Header>\n                <Modal.Title className=\"h6\">Information</Modal.Title>\n                <Button variant=\"close\" aria-label=\"Close\" onClick={handleClose} />\n            </Modal.Header>\n            <Modal.Body>\n                <ReactJson src={info?.val} onEdit={(e) => { handleEdit(info, e) }} />\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"link\" className=\"text-gray ms-auto\" onClick={handleClose}>\n                    Close\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    </Layout >\n}\n\n/**\n * Head export to define metadata for the page\n *\n * See: https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-head/\n */\nexport const Head = () => <Seo title=\"Home\" />\n\nexport default IndexPage\n"],"names":["useEffect","useState","React","Head","Seo","title","IndexPage","isLogin","useAuth","users","setUsers","info","setInfo","handleClose","async","res","Parse","Cloud","run","Layout","afterSearch","DraggableDiv","ItemTable","cols","obj","Object","keys","map","e","key","label","onRender","i","renderValue","val","constructor","Button","onClick","data","Modal","fullscreen","as","Dialog","centered","show","onHide","Header","Title","className","variant","Body","ReactJson","src","onEdit","newValue","_info$obj","objectId","model","updated_src","handleEdit","Footer"],"sourceRoot":""}